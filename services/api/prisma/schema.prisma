generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role
  farmer    Farmer?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  FARMER
  FSP_STAFF
  ADMIN
  AGENT
}

model Farmer {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  name        String
  language    String   @default("en")
  farms       Farm[]
  scores      CreditScore[]
  applications LoanApplication[]
  transactions MobileTransaction[]
  vsla         VslaRecord?
  practices    Json?
}

model Farm {
  id        String   @id @default(cuid())
  farmer    Farmer   @relation(fields: [farmerId], references: [id])
  farmerId  String
  name      String
  // GeoJSON Point stored as JSON string; for PostGIS, consider using native extension in a later milestone
  location  String
  satellite SatelliteData[]
  weather   WeatherData[]
}

model CreditScore {
  id        String   @id @default(cuid())
  farmer    Farmer   @relation(fields: [farmerId], references: [id])
  farmerId  String
  ari       Int
  frl       Int
  bonus     Int
  total     Int
  createdAt DateTime @default(now())
}

model LoanApplication {
  id         String   @id @default(cuid())
  farmer     Farmer   @relation(fields: [farmerId], references: [id])
  farmerId   String
  amountUGX  Int
  status     LoanStatus @default(PENDING)
  createdAt  DateTime @default(now())
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
}

model SatelliteData {
  id        String   @id @default(cuid())
  farm      Farm     @relation(fields: [farmId], references: [id])
  farmId    String
  timestamp DateTime
  ndvi      Float?
  evi       Float?
  provider  String?
}

model WeatherData {
  id          String   @id @default(cuid())
  farm        Farm     @relation(fields: [farmId], references: [id])
  farmId      String
  date        DateTime
  rainfallMm  Float?
  tempC       Float?
  droughtRisk Float?
}

model MobileTransaction {
  id        String   @id @default(cuid())
  farmer    Farmer   @relation(fields: [farmerId], references: [id])
  farmerId  String
  amountUGX Int
  type      TxnType
  at        DateTime @default(now())
}

enum TxnType {
  IN
  OUT
}

model VslaRecord {
  id                     String   @id @default(cuid())
  farmer                 Farmer   @relation(fields: [farmerId], references: [id])
  farmerId               String   @unique
  onTimeRepaymentRate    Float    // 0..1
  delinquencyDaysAvg     Int      // avg days late
  updatedAt              DateTime @updatedAt
}
